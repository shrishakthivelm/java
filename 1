/////////////trapping rainwater
import java.util.Scanner;

public class Water_trapped {
    public static int water(int[] a, int n) {
        int[] left = new int[n];
        int[] right = new int[n];
        
        left[0] = a[0];
        for (int i = 1; i < n; i++) {
            if (left[i - 1] > a[i]) {
                left[i] = left[i - 1];
            } else {
                left[i] = a[i];
            }
        }

        right[n - 1] = a[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            if (right[i + 1] > a[i]) {
                right[i] = right[i + 1];
            } else {
                right[i] = a[i];
            }
        }

        int x, total = 0;
        for (int i = 0; i < n; i++) {
            if (left[i] < right[i]) {
                x = left[i];
            } else {
                x = right[i];
            }
            total += x - a[i];
        }

        return total;
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print("Enter the number of elements: ");
        int n = input.nextInt();
        
        int[] array = new int[n];
        
        System.out.print("Enter the elements:\n");
        for (int i = 0; i < n; i++) {
            array[i] = input.nextInt();
        }
        
        int amt = water(array, n);
        System.out.print("\nThe Total amount of water trapped is " + amt);
    }
}


////////////licensePlate ques
class Solution {
    public String shortestCompletingWord(String licensePlate, String[] words) {
    
        int[] licensePlateCounts = new int[26];

        for(char c: licensePlate.toCharArray()) {
              if(Character.isAlphabetic(c)) {
                  char ch = Character.toLowerCase(c);
                  licensePlateCounts[ch-'a']++;
              }
        }

        String ans = null;
        for(String s: words) {
        
            int[] stringCounts = new int[26];
            for(Character c : s.toCharArray()) {
                stringCounts[Character.toLowerCase(c)-'a']++;
            } 

            boolean exist = true;
            for(int i =0; i < 26; i++) {
                
                if(stringCounts[i] < licensePlateCounts[i]) {
                    exist = false;
                    break;
                } 
            }

            if(exist) {
                ans = (ans == null || s.length() < ans.length() ? s : ans);
            }
        }
        return ans;
     }
}

////////keyboard ques
class Solution {
    public String[] findWords(String[] words) {
        String row1 = "qwertyuiop";
        String row2 = "asdfghjkl";
        String row3 = "zxcvbnm";

        List<String> list = new LinkedList<>();
        for(String word : words){
            int[] rows = new int[3];
            for(char ch : word.toLowerCase().toCharArray()){
                if(row1.indexOf(ch) != -1)
                    rows[0] = 1;
                else if((row2.indexOf(ch) != -1))
                    rows[1] = 1;
                else if((row3.indexOf(ch) != -1))
                    rows[2] = 1;
            }
            int sum = rows[0] + rows[1] + rows[2];
            if(sum == 1)
            list.add(word);
        }

        String[] arr = new String[list.size()];
        int i=0;

        for(String word : list)
            arr[i++] = word;

            return arr;
    }
}

//////////trapping rain water
class Solution {
    public int trap(int[] height) {
        int left = 0;
        int right = height.length-1;
        int water = 0;
        int leftMax = height[left];
        int rightMax = height[right];
        while(left != right)
        {
            if(height[left] < height[right])
            {
                left++;
                leftMax = Math.max(leftMax,height[left]);
                water = water + leftMax - height[left];
            }
            else
            {
                right--;
                rightMax = Math.max(rightMax,height[right]);
                water = water + rightMax - height[right];
            }
        }
        return water;
    }
}


/////HAPPYNUMBER
import java.util.Scanner;

public class Ques1{
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n;
        System.out.print("Enter the number: ");
        n = scn.nextInt();
        int count = 0;
        while(true){
            int sum = 0;

            if(n < 10 && n != 1){
                System.out.println("Not a happy Number");
                break;    
            }

            else{
                while(n>0){
                    int num = n%10;
                    sum += num*num;
                    n=n/10;
                }
            }
            n = sum;
            
            if(n == 1){
                System.out.println("Happy Number");
                break;
            }
            else count++;
            
            if(count > 50){
                System.out.println("Not a happy Number");
                break;
            }
        }
    }
}

//////ps3 reversenumber
 import java.util.Scanner;


   public class reverse
   {
       public static void reversearr(int[] a,int n)
       {
           int temp;
           for(int i=0 ; i < a.length/2 ; i++)
           {
               temp = a[i];
               a[i] = a[n-i-1];
               a[n-i-1] = temp;
           }
           for(int i=0 ; i< a.length ; i++)
           {
               System.out.print(a[i]+" ");
           }
       }
       public static void main(String[] args)
       {
           Scanner input = new Scanner(System.in);
           int num[];
           System.out.println("enter the length of the array : ");
           int n = input.nextInt();
           num = new int[n];
           for(int i=0 ; i<n ; i++)
           {
               System.out.print("enter the value of element " + i);
               num[i] = input.nextInt();
           }
           reverse obj = new reverse();
           obj.reversearr(num, n);
           input.close();
       }
   }
///////ps3 MINGAP
import java.util.Scanner;


public class mingap
{
   public static void gap(int[] a)
   {
       for(int i=1 ; i < a.length ; i++)
       {
           System.out.print(a[i] - a[i-1] + " ");
       }
   }
   public static void main(String[] args)
   {
       Scanner input = new Scanner(System.in);
       int num[];
       System.out.println("enter the length of the array : ");
       int n = input.nextInt();
       num = new int[n];
       for(int i=0 ; i<n ; i++)
       {
           System.out.print("enter the value of element " + i);
           num[i] = input.nextInt();
       }
       mingap obj = new mingap();
       obj.gap(num);
       input.close();   
   }   
}
///////ps3 spiralMatrix
public class SpiralMatrixGenerator { 

    public static int[][] generateMatrix(int size) {
        int[][] matrix = new int[size][size]; 
        int left = 0, right = size - 1, top = 0, bottom = size - 1; 
        int num = 1; 
        
        while (num <= size * size) { 
            // Fill the top row
            for (int i = left; i <= right; i++) { 
                matrix[top][i] = num++; 
            } 
            top++;
            
            // Fill the right column
            for (int i = top; i <= bottom; i++) { 
                matrix[i][right] = num++; 
            } 
            right--;
            
            // Fill the bottom row
            for (int i = right; i >= left; i--) { 
                matrix[bottom][i] = num++; 
            } 
            bottom--;
            
            // Fill the left column
            for (int i = bottom; i >= top; i--) { 
                matrix[i][left] = num++; 
            } 
            left++;
        } 
        
        return matrix; 
    } 

    public static void main(String[] args) { 
        int size = 3; 
        int[][] result = generateMatrix(size); 
        
        System.out.println("Output:"); 
        for (int[] row : result) { 
            for (int num : row) { 
                System.out.print(num + " "); 
            } 
            System.out.println(); 
        } 
    } 
}
///////ps3 matrix menu 

import java.util.Scanner;

public class MatrixOperations { 

    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        System.out.print("Enter number of rows (m): "); 
        int rows = scanner.nextInt(); 
        System.out.print("Enter number of columns (n): "); 
        int cols = scanner.nextInt(); 
        int[][] matrix = new int[rows][cols]; 
        
        while (true) { 
            System.out.println("\nMenu:"); 
            System.out.println("1. Input elements into matrix"); 
            System.out.println("2. Display elements of matrix"); 
            System.out.println("3. Sum of all elements of matrix"); 
            System.out.println("4. Display row-wise sum of matrix"); 
            System.out.println("5. Display column-wise sum of matrix"); 
            System.out.println("6. Create transpose of matrix"); 
            System.out.println("7. Exit"); 
            System.out.print("Enter your choice: "); 
            int choice = scanner.nextInt(); 
            
            switch (choice) { 
                case 1: 
                    matrix = inputMatrix(rows, cols); 
                    break; 
                case 2: 
                    displayMatrix(matrix, rows, cols); 
                    break; 
                case 3: 
                    int totalSum = sumOfElements(matrix, rows, cols); 
                    System.out.println("Sum of all elements: " + totalSum); 
                    break; 
                case 4: 
                    int[] rowSum = rowWiseSum(matrix, rows, cols); 
                    System.out.print("Row-wise sums: "); 
                    for (int sum : rowSum) { 
                        System.out.print(sum + " "); 
                    } 
                    System.out.println(); 
                    break; 
                case 5: 
                    int[] colSum = columnWiseSum(matrix, rows, cols); 
                    System.out.print("Column-wise sums: "); 
                    for (int sum : colSum) { 
                        System.out.print(sum + " "); 
                    } 
                    System.out.println(); 
                    break; 
                case 6: 
                    int[][] transposed = transposeMatrix(matrix, rows, cols); 
                    displayMatrix(transposed, cols, rows); 
                    break; 
                case 7: 
                    System.out.println("Exiting the program."); 
                    return; 
                default: 
                    System.out.println("Invalid choice. Please try again."); 
            } 
        } 
    } 
    
    public static int[][] inputMatrix(int rows, int cols) { 
        Scanner scanner = new Scanner(System.in); 
        int[][] matrix = new int[rows][cols]; 
        System.out.println("Enter elements of the matrix (" + rows + " x " + cols + "):"); 
        for (int i = 0; i < rows; i++) { 
            for (int j = 0; j < cols; j++) { 
                System.out.printf("Element [%d][%d]: ", i + 1, j + 1); 
                matrix[i][j] = scanner.nextInt(); 
            } 
        } 
        return matrix; 
    } 
    
    public static void displayMatrix(int[][] matrix, int rows, int cols) { 
        System.out.println("Matrix:"); 
        for (int i = 0; i < rows; i++) { 
            for (int j = 0; j < cols; j++) { 
                System.out.print(matrix[i][j] + " "); 
            } 
            System.out.println(); 
        } 
    } 
    
    public static int sumOfElements(int[][] matrix, int rows, int cols) { 
        int totalSum = 0; 
        for (int i = 0; i < rows; i++) { 
            for (int j = 0; j < cols; j++) { 
                totalSum += matrix[i][j]; 
            } 
        } 
        return totalSum; 
    } 
    
    public static int[] rowWiseSum(int[][] matrix, int rows, int cols) { 
        int[] rowSums = new int[rows]; 
        for (int i = 0; i < rows; i++) { 
            for (int j = 0; j < cols; j++) { 
                rowSums[i] += matrix[i][j]; 
            } 
        } 
        return rowSums; 
    } 
    
    public static int[] columnWiseSum(int[][] matrix, int rows, int cols) { 
        int[] colSums = new int[cols]; 
        for (int j = 0; j < cols; j++) { 
            for (int i = 0; i < rows; i++) { 
                colSums[j] += matrix[i][j]; 
            } 
        } 
        return colSums; 
    } 
    
    public static int[][] transposeMatrix(int[][] matrix, int rows, int cols) { 
        int[][] transposed = new int[cols][rows]; 
        for (int i = 0; i < rows; i++) { 
            for (int j = 0; j < cols; j++) { 
                transposed[j][i] = matrix[i][j]; 
            } 
        } 
        return transposed; 
    } 
}

///////ps3 print*****

import java.util.Scanner;

public class HuntingtonPoints { 

    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        
        System.out.print("Enter the points by Art: "); 
        int artPoints = scanner.nextInt(); 
        
        System.out.print("Enter the points by Bob: "); 
        int bobPoints = scanner.nextInt(); 
        
        System.out.print("Enter the points by Cal: "); 
        int calPoints = scanner.nextInt(); 
        
        System.out.print("Enter the points by Dan: "); 
        int danPoints = scanner.nextInt(); 
        
        System.out.print("Enter the points by Eli: "); 
        int eliPoints = scanner.nextInt(); 
        
        System.out.print("Art: "); 
        printStars(artPoints); 
        
        System.out.print("Bob: "); 
        printStars(bobPoints); 
        
        System.out.print("Cal: "); 
        printStars(calPoints); 
        
        System.out.print("Dan: "); 
        printStars(danPoints); 
        
        System.out.print("Eli: "); 
        printStars(eliPoints); 
    } 
    
    public static void printStars(int points) { 
        for (int i = 0; i < points; i++) { 
            System.out.print("*"); 
        } 
        System.out.println(); 
    } 
}
//////ps3 stock buy stock

import java.util.Scanner;

public class Price { 

    public static void main(String[] args) { 
        Scanner input = new Scanner(System.in); 
        
        System.out.print("Enter number of days: "); 
        int n = input.nextInt(); 
        
        int[] price = new int[n]; 
        
        for (int i = 0; i < n; i++) { 
            System.out.printf("Enter price on day %d: ", i + 1); 
            price[i] = input.nextInt(); 
        } 
        
        int min = 0; 
        
        for (int i = 0; i < n; i++) { 
            if (price[min] > price[i]) { 
                min = i; 
            } 
        } 
        
        int max = min + 1; 
        
        for (int i = min + 1; i < n; i++) { 
            if (price[max] < price[i]) { 
                max = i; 
            } 
        } 
        
        System.out.print("\nThe maximum profit is " + (price[max] - price[min])); 
    } 
}
////////ps3 largearea
import java.util.Scanner;

public class Largest_rect { 

    public static int largestarea(int[] a, int n) { 
        int min, area, width, max = 0; 
        
        for (int i = 0; i < n; i++) { 
            min = a[i]; 
            
            for (int j = i; j < n; j++) { 
                if (min > a[j]) { 
                    min = a[j]; 
                } 
                
                width = j - i + 1; 
                area = width * min; 
                
                if (max < area) { 
                    max = area; 
                } 
            } 
        } 
        
        return max; 
    } 

    public static void main(String[] args) { 
        Scanner input = new Scanner(System.in); 
        
        System.out.print("Enter the number: "); 
        int n = input.nextInt(); 
        
        int[] array = new int[n]; 
        
        System.out.print("Enter the elements:\n"); 
        for (int i = 0; i < n; i++) { 
            array[i] = input.nextInt(); 
        } 
        
        int area = largestarea(array, n); 
        
        System.out.print("\nThe area of the largest rectangle is " + area); 
    } 
}
/////////ps3 rearrange numbers

import java.util.Scanner;

public class Rearranging_numbers { 

    public static void main(String[] args) { 
        Scanner input = new Scanner(System.in); 
        
        System.out.print("Enter number of elements (even): "); 
        int n = input.nextInt(); 
        
        int[] nums = new int[n]; 
        
        System.out.print("\nEnter the elements:\n"); 
        for (int i = 0; i < n; i++) { 
            nums[i] = input.nextInt(); 
        } 
        
        int[] newnums = new int[n]; 
        int positive = 0, negative = 1; 
        
        for (int i = 0; i < n; i++) { 
            if (nums[i] > 0) { 
                newnums[positive] = nums[i]; 
                positive += 2; 
            } else { 
                newnums[negative] = nums[i]; 
                negative += 2; 
            } 
        } 
        
        System.out.print("\nThe rearranged array:\n"); 
        for (int i = 0; i < n; i++) { 
            System.out.print(newnums[i] + " "); 
        } 
    } 
}
//////////ps3  day of the week

import java.util.Scanner;

public class Day_of_the_week { 

    public static void main(String[] args) { 
        Scanner input = new Scanner(System.in); 
        
        String[] days = { 
            "Saturday", "Sunday", "Monday", "Tuesday", 
            "Wednesday", "Thursday", "Friday" 
        }; 
        
        System.out.print("Enter the year: "); 
        int year = input.nextInt(); 
        
        System.out.print("Enter the month (1-12): "); 
        int month = input.nextInt(); 
        
        System.out.print("Enter the day of the month (1-31): "); 
        int day = input.nextInt(); 
        
        // Adjust for January and February
        if (month == 1) { 
            month = 13; 
            year--; 
        } 
        
        if (month == 2) { 
            month = 14; 
            year--; 
        } 
        
        int q = day; 
        int m = month; 
        int j = year / 100; 
        int k = year % 100; 
        int h; 
        
        h = (q + ((26 * (m + 1)) / 10) + k + (k / 4) + (j / 4) + (5 * j)) % 7; 
        
        System.out.print("\nDay of the week is " + days[h]); 
    } 
}


##########################################################################################################################################


////ps4 Stringcompare
import java.util.Scanner;

public class Compare {
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        
        // Read number of characters to compare
        System.out.println("Enter number of characters to compare:");
        int n1 = obj.nextInt();
        obj.nextLine(); // Consume newline character
        
        // Read starting index
        System.out.println("Enter starting index:");
        int n2 = obj.nextInt();
        obj.nextLine(); // Consume newline character
        
        // Read the first string
        System.out.println("Enter String1:");
        String str1 = obj.nextLine();
        
        // Read the second string
        System.out.println("Enter String2:");
        String str2 = obj.nextLine();
        
        // Validate inputs
        if (n1 < 0 || n2 < 0 || n1 > str2.length() - n2) {
            System.out.println("Invalid input. Please check the starting index and number of characters to compare.");
        } else {
            // Extract the substring from str2
            String sub = str2.substring(n2, n2 + n1);
            
            // Compare and print the result
            System.out.println(str1.equalsIgnoreCase(sub));
        }
        
        // Close the scanner
        obj.close();
    }
}
#################################################################################################################################################################################################################################
Qn1) Write a program that uses the String method to compare two strings input by the user. The application should input the number of characters to be compared and the starting index of the comparison.
The application should state whether the strings are equal. Ignore the case of the characters when performing the comparison
import java.util.Scanner;

public class Compare_string {
    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);
        String str1 = new String();
        String str2 = new String();

        System.out.print("Enter 1st string: ");
        str1 = input.next();

        System.out.print("Enter 2nd string: ");
        str2 = input.next();

        System.out.print("Enter the starting index to compare: ");
        int start = input.nextInt();

        System.out.print("Enter the number of characters to compare: ");
        int len = input.nextInt();

        int end = start + len;

        String sub_str1 = str1.substring(start, end);
        String sub_str2 = str2.substring(start, end);

        boolean c = sub_str1.equalsIgnoreCase(sub_str2);

        if (c == true) {
            System.out.print("The two substrings are equal");
        } else {
            System.out.print("The two substrings are not equal");
        }
    }
}

Qn2) Write a program that inputs a line of text, tokenizes the line with String method split and outputs the tokens in reverse order. Use space characters as delimiters. 

import java.util.Scanner;

public class Splitting_string {
    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);
        String str;

        System.out.print("Enter the text: ");
        str = input.nextLine();

        String[] string = str.split(" ");
        String[] reverse = new String[string.length];
        int j = 0;

        for (int i = string.length - 1; i >= 0; i--) {
            reverse[j] = string[i];
            j++;
        }

        System.out.print("THE REVERSED STRING\n");
        for (int i = 0; i < reverse.length; i++) {
            System.out.print(reverse[i] + " ");
        }
    }
}

Qn3) Write an application that prompts the user for a password that contains at least two uppercase letters, at least three lowercase letters, and at least one digit. 
Continuously re-prompt the user until a valid password is entered. 
Display a message indicating whether the password is valid;if not, display the reason the password is not valid. 

import java.util.Scanner;

public class Password {
    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);

        while (true) {
            System.out.print("\nEnter the password: ");
            String password = input.next();
            int upper = 0, lower = 0, digit = 0;

            for (int i = 0; i < password.length(); i++) {
                if (password.charAt(i) >= 'A' && password.charAt(i) <= 'Z') {
                    upper++;
                } else if (password.charAt(i) >= 'a' && password.charAt(i) <= 'z') {
                    lower++;
                } else if (password.charAt(i) >= '0' && password.charAt(i) <= '9') {
                    digit++;
                }
            }

            if ((upper >= 2) && (lower >= 3) && (digit >= 1)) {
                System.out.print("\nIT IS A VALID PASSWORD");
                break;
            } else {
                System.out.print("\nIT IS AN INVALID PASSWORD\n");
                if (upper < 2) {
                    System.out.print("(There should be at least 2 uppercases)");
                }
                if (lower < 3) {
                    System.out.print("\n(There should be at least 3 lowercases)");
                }
                if (digit < 1) {
                    System.out.print("\n(There should be at least 1 digit)");
                }
                System.out.print("\nTRY AGAIN\n");
            }
        }
    }
}
Qn4) Write a program in java to create a String object. Initialize this object with your name. 
Find the length of your name using the appropriate String method. Find whether character ‘a’ is in your name or not, 
if yes find the number of times ‘a’ appears in your name. Print locations of occurrences of ‘a’. Try the same for different String objects. import java.util.Scanner; 

import java.util.Scanner; 
public class Yourname{ 
public static void main(String args[]){ 
Scanner input = new Scanner(System.in); 
System.out.print("\nEnter your name: "); 
String name = input.nextLine(); 
int count = 0 ; 
int n = name.length(); 
System.out.print("The length of the name is " + (n-1)); 
for (int i=0;i<n;i++) 
{ 
if (name.charAt(i) == 'a' || name.charAt(i) == 'A') 
{ 
System.out.print("\nThe index at where a is found is " + i); count++; 
} 
}
System.out.print("\nThe no of ocurences of a is " + count); } 
} 

Qn5)An anagram is a word or a phrase made by transposing the letters of another word or phrase; for example,
"parliament" is an anagram of "partial men," and "software" is an anagram of "swear oft." 
Write a program that figures out whether one string is an anagram of anotherstring. The program should ignore white space and punctuation. 

import java.util.Arrays; 
import java.util.Scanner; 

public class Anagram { 
    public static boolean anagrams(String str1, String str2) { 
        char[] charArray1 = str1.toCharArray(); 
        char[] charArray2 = str2.toCharArray(); 
        Arrays.sort(charArray1); 
        Arrays.sort(charArray2); 
        return Arrays.equals(charArray1, charArray2); 
    } 

    public static void main(String args[]) { 
        Scanner input = new Scanner(System.in); 

        System.out.print("\nEnter the 1st string: "); 
        String str1 = input.nextLine(); 

        System.out.print("\nEnter the 2nd string: "); 
        String str2 = input.nextLine(); 

        str1 = str1.replaceAll("\\s", ""); 
        str2 = str2.replaceAll("\\s", ""); 
        str1 = str1.toLowerCase(); 
        str2 = str2.toLowerCase(); 

        if (anagrams(str1, str2)) { 
            System.out.println("\nThe two strings are anagrams"); 
        } else { 
            System.out.println("\nThe two strings are not anagrams"); 
        } 
    } 
} 

Qn6) Write program in Java for String handling which perform followings i) Checks the capacity of StringBuffer objects 
ii) Reverse the contents of a string given on console and convert the resultant string in upper case 
iii) Read a string from the console and append it to the resultant string of ii. 
import java.util.Scanner;

public class String_buffer {
    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);
        StringBuffer str1 = new StringBuffer();

        System.out.println("\nThe initial capacity of the buffer: " + str1.capacity());

        System.out.print("Enter the string: ");
        String str = input.nextLine();

        str1.append(str);
        str1.reverse();
        String reversestr1 = str1.toString().toUpperCase();

        System.out.println("The reversed string in uppercase is: " + reversestr1);

        System.out.println("Enter the string to append: ");
        str = input.nextLine();

        str1.append(str);
        System.out.println("Final String: " + str1.toString());
    }
}
Qn7) Write a program that inserts parentheses, a space, and a dash into a string of 10 user-entered numbers to format it as a phone number. For example, 5153458912 becomes (515) 345-8912.
If the user does not enter exactly 10 digits, display an error message. Continue to accept user input until the user enters 999.

import java.util.Scanner;

public class Phone_number {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        while (true) {
            System.out.print("\nEnter the number: ");
            String num = input.nextLine();
            int n = num.length();

            if (num.equals("999")) 
                break;

            if (n != 10) {
                System.out.print("\nPlease enter a 10 digit number\n");
                continue;
            }

            String number = "(";

            for (int i = 0; i < n; i++) {
                if (i == 3) 
                    number += ")";
                if (i == 6) 
                    number += "-";
                
                number += num.charAt(i);
            }

            System.out.println("\nThe formatted phone number is " + number);
        }
    }
}
Qn8) Write an application that accepts a word from a user and converts it to Pig Latin. If a word starts with a consonant, the Pig Latin version removes all consonants from the beginning of the word and places them at the end, followed by ay. For example, cricket becomes icketcray. If a word starts with a vowel, the Pig Latin version is the original word with ay added to the end. For example, apple become appleay. If y is the first letter in a word, it is treated as a consonant; otherwise, it is treated as a vowel.
For example, young people become oungyay, but the system becomes ystemsay.
For this program, assume that the user will enter only a single word consisting of all lowercase letters

import java.util.Scanner;

public class Pig_latin {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String vowels = "aeiou";
        String piglatin = "";

        System.out.print("\nEnter the word (in lower cases): ");
        String word = input.nextLine();
        int n = word.length();
        int firstVowelIndex = -1;

        for (int i = 0; i < n; i++) {
            char ch = word.charAt(i);
            if (vowels.contains(String.valueOf(ch)) || (ch == 'y' && i != 0)) {
                firstVowelIndex = i;
                break;
            }
        }

        if (firstVowelIndex == -1) {
            piglatin = word + "ay";
        } else {
            piglatin = word.substring(firstVowelIndex) + word.substring(0, firstVowelIndex) + "ay";
        }

        System.out.println("The pigLatin word is " + piglatin);
    }
}

Qn9) Biologists use a sequence of the letters A, C, T, and G to model a genome. A gene is a substring of a genome that starts after a triplet ATG and ends before a triplet TAG, TAA, or TGA. 
Furthermore, the length of a gene string is a multiple of 3, and the gene does not contain any of the triplets ATG, TAG, TAA, or TGA. Write a program that prompts the user 
to enter a genome and displays all genes in the genome. If no gene is found in the input sequence, display “no gene is found”. Here are the sample runs: 

import java.util.Scanner;

public class Sequence_analyzer {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the sequence: ");
        String sequence = input.nextLine();
        boolean geneFound = false;
        int index = 0;

        while (index < sequence.length() - 3) {
            int start = sequence.indexOf("ATG", index);
            if (start == -1) break;

            int endTAG = sequence.indexOf("TAG", start + 3);
            int endTAA = sequence.indexOf("TAA", start + 3);
            int endTGA = sequence.indexOf("TGA", start + 3);
            int end = -1;

            if (endTAG != -1 && (endTAG - start) % 3 == 0 && (end == -1 || endTAG < end)) 
                end = endTAG;

            if (endTAA != -1 && (endTAA - start) % 3 == 0 && (end == -1 || endTAA < end)) 
                end = endTAA;

            if (endTGA != -1 && (endTGA - start) % 3 == 0 && (end == -1 || endTGA < end)) 
                end = endTGA;

            if (end != -1) {
                String gene = sequence.substring(start + 3, end);
                if (!gene.contains("ATG") && !gene.contains("TAG") && 
                    !gene.contains("TAA") && !gene.contains("TGA")) {
                    System.out.println("Gene found: " + gene);
                    geneFound = true;
                }
                index = end + 3;
            } else {
                index = start + 3;
            }
        }

        if (!geneFound) {
            System.out.println("No gene is found");
        }
    }
}

Qn10)Given an m x n grid of characters board and a string word. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once. Write a program that returns true if a word exists in the grid. Example: 
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED" 
Output: true

import java.util.Scanner;

public class Word_board {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter the number of rows: ");
        int m = input.nextInt();
        System.out.print("Enter the number of columns: ");
        int n = input.nextInt();

        char[][] board = new char[m][n];
        System.out.println("Enter the board characters:");
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = input.next().charAt(0);
            }
        }

        System.out.print("Enter the word: ");
        String word = input.next();

        boolean result = exist(board, word);
        System.out.println("The word " + (result ? "exists" : "does not exist") + " in the board.");
    }

    public static boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (search(board, word, i, j, 0)) {
                    return true;
                }
            }
        }

        return false;
    }

    private static boolean search(char[][] board, String word, int i, int j, int index) {
        if (index == word.length()) {
            return true;
        }

        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != word.charAt(index)) {
            return false;
        }

        char temp = board[i][j];
        board[i][j] = ' '; // Mark the cell as visited

        boolean found = search(board, word, i + 1, j, index + 1) || 
                        search(board, word, i - 1, j, index + 1) || 
                        search(board, word, i, j + 1, index + 1) || 
                        search(board, word, i, j - 1, index + 1);

        board[i][j] = temp; // Restore the cell's original value

        return found;
    }
}

Qn11) Write a program to find the number of valid words in a given sentence. A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '. 
A token is a valid word if all three of the following are true: 
1) It only contains lowercase letters, hyphens, and/or punctuation (no digits). 2) There is at most one hyphen '-'. If present, it must be surrounded by lowercase characters ("a-b" is valid, but "-ab" and "ab-" are not valid). 
3) There is at most one punctuation mark. If present, it must be at the end of the token ("ab,", "cd!", and "." are valid, but "a!b" and "c.," are not valid). Examples of valid words include "a-b.", "afad", "ba-c", "a!", and "!". Given a string sentence, return the number of valid words in the sentence. 

import java.util.Scanner;

public class Valid_words {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print("Enter the sentence: ");
        String sentence = input.nextLine();
        int count = countValidWords(sentence);
        System.out.println("Number of valid words: " + count);
    }

    public static int countValidWords(String sentence) {
        String[] tokens = sentence.trim().split("\\s+");
        int validCount = 0;

        for (String token : tokens) {
            if (isValidWord(token)) {
                validCount++;
            }
        }

        return validCount;
    }

    public static boolean isValidWord(String token) {
        if (token.length() == 0) {
            return false;
        }

        int hyphenCount = 0;
        int punctuationCount = 0;

        for (int i = 0; i < token.length(); i++) {
            char ch = token.charAt(i);

            if (Character.isDigit(ch)) {
                return false;
            }

            if (ch == '-') {
                hyphenCount++;
                if (hyphenCount > 1 || i == 0 || i == token.length() - 1 || 
                    !Character.isLowerCase(token.charAt(i - 1)) || 
                    !Character.isLowerCase(token.charAt(i + 1))) {
                    return false;
                }
            }

            if (ch == '!' || ch == '.' || ch == ',') {
                punctuationCount++;
                if (punctuationCount > 1 || i != token.length() - 1) {
                    return false;
                }
            }
        }

        return true;
    }
}

Qn12) The international standard letter/number mapping found on the telephone is: 
Write a method that returns a number, given an uppercase letter, as follows: public static int getNumber(char uppercaseLetter) Write a test program that prompts the user to enter a phone number as a string. The inputnumber may contain letters. 
The program translates a letter (upper- or lowercase) to a digit and leaves all other characters intact. Here is a sample run of the program:

import java.util.Scanner;

public class NumberTranslator {
    public static int getNumber(char uppercaseLetter) {
        if (uppercaseLetter >= 'A' && uppercaseLetter <= 'C') {
            return 2;
        } else if (uppercaseLetter >= 'D' && uppercaseLetter <= 'F') {
            return 3;
        } else if (uppercaseLetter >= 'G' && uppercaseLetter <= 'I') {
            return 4;
        } else if (uppercaseLetter >= 'J' && uppercaseLetter <= 'L') {
            return 5;
        } else if (uppercaseLetter >= 'M' && uppercaseLetter <= 'O') {
            return 6;
        } else if (uppercaseLetter >= 'P' && uppercaseLetter <= 'S') {
            return 7;
        } else if (uppercaseLetter >= 'T' && uppercaseLetter <= 'V') {
            return 8;
        } else if (uppercaseLetter >= 'W' && uppercaseLetter <= 'Z') {
            return 9;
        }
        return -1;
    }

    public static String translatePhoneNumber(String phoneNumber) {
        StringBuilder translatedNumber = new StringBuilder();
        for (char ch : phoneNumber.toCharArray()) {
            if (Character.isLetter(ch)) {
                char uppercaseLetter = Character.toUpperCase(ch);
                int digit = getNumber(uppercaseLetter);
                if (digit != -1) {
                    translatedNumber.append(digit);
                }
            } else {
                translatedNumber.append(ch);
            }
        }
        return translatedNumber.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a phone number with letters: ");
        String phoneNumber = scanner.nextLine();
        String translatedNumber = translatePhoneNumber(phoneNumber);
        System.out.println("Translated phone number: " + translatedNumber);
    }
}





